do
  d1
    $ every 8 rev
    $ stack [
              jux rev $ n "4 [4*2] ~ [~ 9?] [~ 10?]" # gain 1.4,
              crush "2*2 3 1 4"  <| cat [n "[~ 14]*5", n "14?*10"] # gain 0.8,
              hurry 0.5 $ n "8 ~ 8? ~ 8 ~ 8? ~ 8? ~" # gain 0.75]
    # s "Moog_Voyager"
    # room 0.4
    # slow 4 (every 4 rev (pan "0 [-0.5 0] 0.5 [0 -0.5] [0 0.5]"))
    # sz 0.9
  o 1
    $ every 8 rev
    $ stack [
              jux rev $ n "4 [4*2] ~ [~ 9?] [~ 10?]" # gain 1.4,
              crush "2*2 3 1 4"  <| cat [n "[~ 14]*5", n "14?*10"] # gain 0.8,
              hurry 0.5 $ n "8 ~ 8? ~ 8 ~ 8? ~ 8? ~" # gain 0.75]
    # slow 4 (every 4 rev (pan "0 [-0.5 0] 0.5 [0 -0.5] [0 0.5]"))


    let pattern1 = "0 7 14 21 ~ 4 5 12 19 18?"
    let pattern2 = pattern1 |+ "2"
    let pattern3 = pattern2 |+ "2"

do
    d2
      $ every 4 palindrome $ cat [n pattern1*4, n pattern2*4, n pattern3*4, n pattern2*4]
      # s "superfm"
      # octave 5
      # voice 0
      # room 0.5
      # pan cosine
      # gain "0.8"
    d3
     $ slow 8 $ n "c'min7sharp9'4 c'min7sharp9'5 d'min7sharp9'4 d'min7sharp9'5 e'min7sharp9'4 e'min7sharp9'5 d'min7sharp9'4 d'min7sharp9'5"
     # s "superhammond"
     # voice 2
     # gain "0.8"
     # room 0.3
     # pan sine
     # sz 0.2

let alpha  = "[0 [0 0]] ~ [4 8] [14 [20*3]] [~ 20]"
let alpha2 = "0 4 8 14 20"
let alpha3 = "0 4 [8*2 ~] [14?*4 ~] [20?*2]"

d4
  $ slow 4 $ select (slow 3 $ 1/3) [n alpha, n alpha2, n alpha3]
  # s "alphabet"
  # room 0.3
  # pan cosine
  # sz 0.2
  -- # silence

  hush

  panic
